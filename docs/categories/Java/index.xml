<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on Programming Notes</title>
    <link>https://sureshsarda.in/categories/Java/</link>
    <description>Recent content in Java on Programming Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 29 Mar 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://sureshsarda.in/categories/Java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Creating a map from List in Java 8</title>
      <link>https://sureshsarda.in/java/list-to-map-java-8-streams/</link>
      <pubDate>Sun, 29 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://sureshsarda.in/java/list-to-map-java-8-streams/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Convert String to title case in Java using Streams</title>
      <link>https://sureshsarda.in/java/convert-string-title-case-java-streams/</link>
      <pubDate>Tue, 10 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://sureshsarda.in/java/convert-string-title-case-java-streams/</guid>
      <description>Title case is capitalized first character of each word. That means, we have to do this:
 Break at word boundaries Capitalize the first character and lowercase the others Join again at word boundaries.  public String toTitleCase(String str) { final String wordBoundary = &amp;#34; &amp;#34;; return Arrays.stream(str.split(wordBoundary)) .map(it -&amp;gt; it.substring(0, 1).toUpperCase() + it.substring(1, it.length()).toLowerCase()) .collect(Collectors.joining(wordBoundary)); } Let&amp;rsquo;s see it in actions:
Roughing It =&amp;gt; Roughing It PRIde AnD PrejudICE =&amp;gt; Pride And Prejudice a tale of two Cities =&amp;gt; A Tale Of Two Cities </description>
    </item>
    
    <item>
      <title>Spring MVC - @RequestBody annotation to parse Http Request Body</title>
      <link>https://sureshsarda.in/java/spring/spring-mvc-boot-rest-request-body-parse-http-request-body/</link>
      <pubDate>Mon, 25 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://sureshsarda.in/java/spring/spring-mvc-boot-rest-request-body-parse-http-request-body/</guid>
      <description>In this article we will take a look at how to use the @RequestBody annotation.
The @RequestBody is used to automatically parse and serialize the Http Request Body of the request and create Java objects out of it. The Java objects can be a POJO (Plain Old Java Objects) or a Map depending on the requirement.
Let&amp;rsquo;s take an example on how to use @RequestBody annotation to parse body passed as application/json:</description>
    </item>
    
    <item>
      <title>Spring REST - Extract URL Path Variables</title>
      <link>https://sureshsarda.in/java/spring/extract-use-parse-url-path-data-variable/</link>
      <pubDate>Sun, 24 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://sureshsarda.in/java/spring/extract-use-parse-url-path-data-variable/</guid>
      <description>REST APIs have resource names and resource id present in the URL path unlike a traditional web API. This article focuses on how to extract that information and use it.
Take a typical REST URL:
GET https://api.bookstore.com/authors/twain-mark/books/roughing-it Here, the name of the author and the name of the book are inside the book and not part of the request body or query parameters. This is a standard practice while developing REST APIs.</description>
    </item>
    
    <item>
      <title>Spring - Read Http Request headers</title>
      <link>https://sureshsarda.in/java/spring/request-headers-in-spring-rest/</link>
      <pubDate>Sat, 23 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://sureshsarda.in/java/spring/request-headers-in-spring-rest/</guid>
      <description>In the previous article we saw how to use request parameters and request body of a request. In this article we will see how to use the request headers.
The request headers can be accessed using the @RequestHeader attribute.
@RequestMapping(&amp;#34;/greeting&amp;#34;) public ResponseEntity&amp;lt;String&amp;gt; greeting(@RequestHeader(&amp;#34;Accept-Language&amp;#34;) String language, @RequestHeader(&amp;#34;Content-Type&amp;#34;) String contentType) { // do something with the headers  return new ResponseEntity&amp;lt;String&amp;gt;(String.format(&amp;#34;Language: %s, Content Type: %s&amp;#34;, language, contentType), HttpStatus.OK); } Note that the name of the header field is case insensitive.</description>
    </item>
    
    <item>
      <title>Java 8 Streams 101</title>
      <link>https://sureshsarda.in/java/introduction-to-java-streams-101/</link>
      <pubDate>Mon, 18 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://sureshsarda.in/java/introduction-to-java-streams-101/</guid>
      <description>Java 8 introduced a new Stream API. In this article we will take a look at how to create and use streams.
How do I create Streams? Streams can be created using the of method on the Stream class like this:
Stream&amp;lt;String&amp;gt; stream = Stream.&amp;lt;String&amp;gt;of(&amp;#34;Lorem&amp;#34;, &amp;#34;ipsum&amp;#34;, &amp;#34;dolor&amp;#34;, &amp;#34;sit&amp;#34;, &amp;#34;amet&amp;#34;); Or calling the stream() method on list or any collection like this:
List&amp;lt;String&amp;gt; list = Arrays.asList(&amp;#34;Lorem&amp;#34;, &amp;#34;ipsum&amp;#34;, &amp;#34;dolor&amp;#34;, &amp;#34;sit&amp;#34;, &amp;#34;amet&amp;#34;); Stream&amp;lt;String&amp;gt; stream = list.</description>
    </item>
    
    <item>
      <title>Creating CSV from Strings in Java</title>
      <link>https://sureshsarda.in/java/creating-csv-from-strings/</link>
      <pubDate>Sun, 17 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://sureshsarda.in/java/creating-csv-from-strings/</guid>
      <description>Earlier in Java 7, you needed a StringBuilder to create a CSV from list. From Java 8 onwards, there are multiple ways to achieve this depending on the task in hand.
1. Using the String.join method The String class has a join method that take a delimiter.
List&amp;lt;String&amp;gt; tokens = Arrays.asList(&amp;#34;one&amp;#34;, &amp;#34;two&amp;#34;, &amp;#34;three&amp;#34;); String joined = String.join(&amp;#34;,&amp;#34;, tokens); System.out.println(joined); // --output -- // one,two,three 2. Using the StringJoiner Another similar way to achieve this is using the StringJoiner class.</description>
    </item>
    
    <item>
      <title>Running in Pig in Local Mode in Java</title>
      <link>https://sureshsarda.in/posts/2018-08-01-running-hadoop/</link>
      <pubDate>Wed, 01 Aug 2018 07:11:02 +0000</pubDate>
      
      <guid>https://sureshsarda.in/posts/2018-08-01-running-hadoop/</guid>
      <description>Overview of steps  Create a new maven project Add Hadoop and Pig dependencies Write a small pig script to count words in a file Write a driver program that will run this pig script  1. Create a new maven project mvn archetype:generate -DgroupId=com.example -DartifactId=piglocal -DarchetypeArtifactId=maven-archetype-webapp -DinteractiveMode=false You can now import the project in your IDE.
2. Add Hadoop and Pig dependencies Pig needs the following dependencies:
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.pig&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;pig&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;0.</description>
    </item>
    
  </channel>
</rss>
