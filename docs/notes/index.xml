<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Directory of notes on Programming Notes</title>
    <link>https://sureshsarda.github.io/notes/</link>
    <description>Recent content in Directory of notes on Programming Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://sureshsarda.github.io/notes/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>https://sureshsarda.github.io/notes/architecture/incident-management/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sureshsarda.github.io/notes/architecture/incident-management/</guid>
      <description>References  https://dropbox.tech/infrastructure/lessons-learned-in-incident-management  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://sureshsarda.github.io/notes/architecture/summary/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sureshsarda.github.io/notes/architecture/summary/</guid>
      <description> Everything is a tradeoff
  Scalability vs Performance Latency vs throughput Availability vs Consistency  What to think of when you start  Who is going to use it   Aspects to consider  Security Incident Management Fault tolerance and recovery and reliability  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://sureshsarda.github.io/notes/architecture/terms/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sureshsarda.github.io/notes/architecture/terms/</guid>
      <description>Federation The database is partitioned by functional use cases. For example, you will end up with databases like CustomerDb, ProductsDb, etc
Sharding The database is partitions the data bases on the value of each object or a key in an object. For example, the UserDb itself will be stored on multiple nodes based on (perhaps) the name.
Consistent Hashing A hashing technique that doesn&amp;rsquo;t care about the number of buckets that you have.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://sureshsarda.github.io/notes/distributed-computing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sureshsarda.github.io/notes/distributed-computing/</guid>
      <description>Leader Election Bully Algorithm Message Types  Election Victory Coordinator  Algorithm  If highest processID - Send Victory Message, Else, broadcast Election to higher processes If no answer after sending election, send Victory to all processes If answer received, then further messages If receives Election message - ack and go to top If coordinator message - treat sender as coordinator  graph TD A{Highest ID} -- Yes --&amp;gt; B[Send Victory message] A -- No --&amp;gt; C[Send Election Message] B --&amp;gt; D C -- Ack Received --&amp;gt; D((Leader Elected)) C -- No Answer --&amp;gt; E[Send Victory] E --&amp;gt; D T((Election Triggered)) --&amp;gt; X X[Election Message] --&amp;gt; Y[Send Ack] Y --&amp;gt; A </description>
    </item>
    
    <item>
      <title></title>
      <link>https://sureshsarda.github.io/notes/fundamentals/concurrency-java/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sureshsarda.github.io/notes/fundamentals/concurrency-java/</guid>
      <description>Concurrency Concurrency Vs Parallelism
 Concurrecny - running more than one thing together on a single resource, interleaved Parallelism - you have more than one resource to run  Static methods in the Thread class  Thread.sleep() Thread.interrupted() Thread.join() Thread.wait()  Synchronization  synchronized keyword - uses the internsic lock of the object. All synchronized methods are together in an object synchronized keyword with static method - uses the internsic lock of the class  Re-entrant Synchronization  Allows to acquire a lock which you already have  Atomic Access  Assignment is atomic, but a++ is not Operations on volatile variales are atomic?</description>
    </item>
    
    <item>
      <title></title>
      <link>https://sureshsarda.github.io/notes/interview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sureshsarda.github.io/notes/interview/</guid>
      <description>Introduction  Challenging things that you have done  Problem Solving  Dutch national flag (with/without linked lists) n-way file merge coin exchange  Design Theoretical  MVC vs MVVM vs MVP Design Patterns Dependency Injection, IoC Tools that they have used?  Databases  SQL vs NoSQL CAP Theorem  APIs  Authentication - OAuth, Basic, more?  System Design  Design a system? Which  Feedbacks Ajay Kumar (SDE-2)  Was able to explain what he was working - didn&amp;rsquo;t find anything challenging though Design principles - he was able to talk - SRP and Open-Close Dependency Injection, IoC - could just say simplicity Design pattens - strategy, factory, adapter, singleton, builder Follow up on adapter - couldn&amp;rsquo;t explain correctly, but I think he was saying correct, just couldn&amp;rsquo;t explain Follow up on factory - he knows because he used it, doesn&amp;rsquo;t know it well Dutch National Flag (sort array 0, 1, 2) -  Didn&amp;rsquo;t mention sorting and counting approaches - which are kinda typical Didn&amp;rsquo;t mention approach by using extra space Couldn&amp;rsquo;t explain the approach He followed similar approach with linked list as well   Merge Multiple Sorted Array (smaller question of n-way file merge)  He was able to come up with approache, not sure about implementation Time complexity - incorrect, gave him hints - he got the problem, but couldn&amp;rsquo;t tell the time complexity Heap - asked him about real world usage - where he has used/seen it, couldn&amp;rsquo;t tell    Overall, found him a bit slow, and he requires a more grooming, exposure and hard work.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://sureshsarda.github.io/notes/kafka/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sureshsarda.github.io/notes/kafka/</guid>
      <description>Message Brokers Apache Kafka  Requires ZooKeeper Node = Broker Topics are divided in one or more partition (partition = parallel) Consumers consume from topic at their own speed Consumers can be grouped in Consumer Group to increase consumption, consumer group share the offset Each consumer group has their own offset  Architecture Pros &amp;amp; Cons    Pros Cons     Scales really well, millions of messages per second No ideal for job queues, this is a simple pub-sub tool    RabbitMQ  Offers a variety of consuming mechanisms, Kafka is like a subset  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://sureshsarda.github.io/notes/string-searching/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sureshsarda.github.io/notes/string-searching/</guid>
      <description>String Searching Todo  KMP Hashing functions for RabinKarp Write notes regarding RabinKarp  Hashing  Polynomial Rolling Hashing  hash(s) = s[0] + s[1]**p + s[2]**p^2 ... s[n-2].p^(n-2) + s[n-1].p^(n-1) mod m = sum s[i].p^i mod m where p and m are some chosen numbers p &amp;lt;- 31 m &amp;lt;- 1e9 + 9 hash_value &amp;lt;- 0 p_pow &amp;lt;- 1 for char_as_number in string: hash_value &amp;lt;- (hash_value + char_as_number ^ p_pow) % m p_pow &amp;lt;- (p_pow * p) % m At the end of the loop you will have the hash value.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://sureshsarda.github.io/notes/web-worker/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sureshsarda.github.io/notes/web-worker/</guid>
      <description>Service Workers  Runs in background seperate from the web page Push Notification, background sync Intercept, handle network requests Can&amp;rsquo;t access dom WebSockets not supported  Registering a service worker if (&amp;#39;serviceWorker&amp;#39; in navigator) { window.addEventListener(&amp;#39;load&amp;#39;, function () { navigator.serviceWorker.register(&amp;#39;/sw.js&amp;#39;).then(function (registration) { // Registration was successful  console.log(&amp;#39;ServiceWorker registration successful with scope: &amp;#39;, registration.scope); }, function (err) { // registration failed :(  console.log(&amp;#39;ServiceWorker registration failed: &amp;#39;, err); }); }); } You can register as many times you want, browser will keep it once.</description>
    </item>
    
    <item>
      <title>Algebra Basics</title>
      <link>https://sureshsarda.github.io/notes/algebra/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sureshsarda.github.io/notes/algebra/</guid>
      <description>Modular Arithmetic  Defn: If a and b are integers, a m is a positive integer, then a is congruent to modulo b, if, m divides a - b (i.e. the delta is divisible by m) The above holds only if a % m == b % m Also, congruence holds true if and only iff, there exists a number k, such that a = b + km, (writing the first point in another way.</description>
    </item>
    
    <item>
      <title>Engineering Blogs</title>
      <link>https://sureshsarda.github.io/notes/architecture/curated/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sureshsarda.github.io/notes/architecture/curated/</guid>
      <description>Blogs Articles  https://gist.github.com/vasanthk/485d1c25737e8e72759f https://github.com/shashank88/system_design https://github.com/checkcheckzz/system-design-interview https://github.com/donnemartin/system-design-primer#how-to-approach-a-system-design-interview-question  Curated Curated Lists  http://dancres.github.io/Pages/  Papers  Presto: SQL on Everything, (Facebook Research)  Quotes   Success means shaving every possible minute from that response, https://dropbox.tech/infrastructure/lessons-learned-in-incident-management
  Logging is the key to detecting problems. Source
  Not using metrics in your development process is like trying to land a plane in a storm with your altimeter not working</description>
    </item>
    
  </channel>
</rss>
