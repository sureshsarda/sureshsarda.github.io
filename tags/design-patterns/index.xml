<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>design patterns on s9a.me</title><link>/tags/design-patterns/</link><description>Recent content in design patterns on s9a.me</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 30 Nov 2021 00:00:00 +0000</lastBuildDate><atom:link href="/tags/design-patterns/index.xml" rel="self" type="application/rss+xml"/><item><title>Design Patterns for Container Based Distributed Systems</title><link>/posts/2021-11-30-design-patterns-for-container-application/</link><pubDate>Tue, 30 Nov 2021 00:00:00 +0000</pubDate><guid>/posts/2021-11-30-design-patterns-for-container-application/</guid><description>This article is inspired from paper titled with the same name published by Brendan Burns and David Oppenheimer
Containers now a days are becoming more and more analogous to objects in object-oriented programming. Like objects, containers should be small and should do one and only one thing. That’s just another way of saying Single Responsibility Principle. We are seeing a similar trend from the late 1980s and early 1990s when object-oriented programming revolutionized software development.</description></item><item><title>Memento</title><link>/posts/2016-08-11-memento/</link><pubDate>Thu, 11 Aug 2016 00:00:00 +0000</pubDate><guid>/posts/2016-08-11-memento/</guid><description>Ever used an image editing software? We opened an image but it’s too sharp and the light is not good. We make some changes and still not satisfied, we make few more changes only to realize that the previous changes were better than these new! We want to restore to previous changes. If we were using a drawing sheet and paint brush, this task would be very difficult; perhaps impossible. But with softwares, that’s not a problem.</description></item></channel></rss>