<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>spring on s9a.me</title><link>s9a.me/tags/spring/</link><description>Recent content in spring on s9a.me</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 24 Nov 2019 00:00:00 +0000</lastBuildDate><atom:link href="s9a.me/tags/spring/index.xml" rel="self" type="application/rss+xml"/><item><title>Spring REST - Extract URL Path Variables</title><link>s9a.me/java/spring/extract-use-parse-url-path-data-variable/</link><pubDate>Sun, 24 Nov 2019 00:00:00 +0000</pubDate><guid>s9a.me/java/spring/extract-use-parse-url-path-data-variable/</guid><description>REST APIs have resource names and resource id present in the URL path unlike a traditional web API. This article focuses on how to extract that information and use it.
Take a typical REST URL:
GET https://api.bookstore.com/authors/twain-mark/books/roughing-it Here, the name of the author and the name of the book are inside the book and not part of the request body or query parameters. This is a standard practice while developing REST APIs.</description></item><item><title>Spring - Read Http Request headers</title><link>s9a.me/java/spring/request-headers-in-spring-rest/</link><pubDate>Sat, 23 Nov 2019 00:00:00 +0000</pubDate><guid>s9a.me/java/spring/request-headers-in-spring-rest/</guid><description>In the previous article we saw how to use request parameters and request body of a request. In this article we will see how to use the request headers.
The request headers can be accessed using the @RequestHeader attribute.
@RequestMapping(&amp;#34;/greeting&amp;#34;) public ResponseEntity&amp;lt;String&amp;gt; greeting(@RequestHeader(&amp;#34;Accept-Language&amp;#34;) String language, @RequestHeader(&amp;#34;Content-Type&amp;#34;) String contentType) { // do something with the headers return new ResponseEntity&amp;lt;String&amp;gt;(String.format(&amp;#34;Language: %s, Content Type: %s&amp;#34;, language, contentType), HttpStatus.OK); } Note that the name of the header field is case insensitive.</description></item></channel></rss>