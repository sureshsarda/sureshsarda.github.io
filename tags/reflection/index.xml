<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>reflection on s9a.me</title><link>/tags/reflection/</link><description>Recent content in reflection on s9a.me</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 17 Dec 2022 00:00:00 +0000</lastBuildDate><atom:link href="/tags/reflection/index.xml" rel="self" type="application/rss+xml"/><item><title>Create a service mocking framework around Proxy.newProxyInstance</title><link>/posts/2022-12-17-proxy-new-instance-json-mock-utility/</link><pubDate>Sat, 17 Dec 2022 00:00:00 +0000</pubDate><guid>/posts/2022-12-17-proxy-new-instance-json-mock-utility/</guid><description>Introducing Proxy.newProxyInstance The Java Reflection API provides a helper method to create proxy implementation (substitute or placeholder for another object[1]) of any class.
The idea is to provide a list of classes or interfaces that this new proxy would inherit/implement and provide a callback which will be invoked every time the proxy is called.
Code Example With this knowledge and the documentation, letâ€™s see if this in action and understand more from there.</description></item></channel></rss>