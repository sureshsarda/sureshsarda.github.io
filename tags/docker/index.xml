<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Docker on s9a.me</title><link>https://s9a.me/tags/docker/</link><description>Recent content in Docker on s9a.me</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 25 Jan 2023 08:46:58 +0530</lastBuildDate><atom:link href="https://s9a.me/tags/docker/index.xml" rel="self" type="application/rss+xml"/><item><title>Creating TestContainers from Dockerfile and DSL</title><link>https://s9a.me/posts/2023-01-07-test-containers-from-dockerfile-and-dsl/</link><pubDate>Sat, 07 Jan 2023 00:00:00 +0000</pubDate><guid>https://s9a.me/posts/2023-01-07-test-containers-from-dockerfile-and-dsl/</guid><description>Containers make the job of writing integration test cases quite easy which rely on a tool like a database or cloud infrastructure or any other tool for that matter. Test containers take it a step further but letting us create containers from the code itself.
There is another neat trick in TestContainers that let’s us create the containers on the fly. From Dockerfile or directly by declaring the container spec with Java using a DSL.</description></item><item><title>Network Namespaces and Veth pairs</title><link>https://s9a.me/posts/2022-12-14-network-namespaces-and-veth/</link><pubDate>Wed, 14 Dec 2022 00:00:00 +0000</pubDate><guid>https://s9a.me/posts/2022-12-14-network-namespaces-and-veth/</guid><description>Containers are a thing now and microservices the new buzz word. But how do containers work? How are containers magically separated from each other?
VMs require an entire operating system running and therefore consumes memory and CPU. In fact, if I remember correctly, running a Ubuntu VM requires atleast 500-600mb of memory and at least one CPU core. But containers run in fraction of resources and provide almost similar features for an application developer.</description></item><item><title>Design Patterns for Container Based Distributed Systems</title><link>https://s9a.me/posts/2021-11-30-design-patterns-for-container-application/</link><pubDate>Tue, 30 Nov 2021 00:00:00 +0000</pubDate><guid>https://s9a.me/posts/2021-11-30-design-patterns-for-container-application/</guid><description>This article is inspired from paper titled with the same name published by Brendan Burns and David Oppenheimer
Containers now a days are becoming more and more analogous to objects in object-oriented programming. Like objects, containers should be small and should do one and only one thing. That’s just another way of saying Single Responsibility Principle. We are seeing a similar trend from the late 1980s and early 1990s when object-oriented programming revolutionized software development.</description></item><item><title>Create your first Docker container</title><link>https://s9a.me/posts/2019-09-28-creating-your-first-docker-image/</link><pubDate>Sat, 28 Sep 2019 10:00:00 +0000</pubDate><guid>https://s9a.me/posts/2019-09-28-creating-your-first-docker-image/</guid><description>Part 1 of a multi-part essay on configuring Docker in production.
Prerequisites You have Docker installed (See instructions to install) (Optional) You know to to deploy a Flask application using command line Docker works on basis of configurations. It&amp;rsquo;s a declarative way of telling Docker how to build images.
A typical workflow starts with a base image, works on top of it, saves it either for future use or gets reused as a base image of something else.</description></item></channel></rss>