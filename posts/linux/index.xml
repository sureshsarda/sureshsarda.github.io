<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Linux on s9a.me</title><link>/posts/linux/</link><description>Recent content in Linux on s9a.me</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="/posts/linux/index.xml" rel="self" type="application/rss+xml"/><item><title>Bash: Setting variables from a file</title><link>/posts/linux/2016-10-30-bash-setting-variables-from-a-file/</link><pubDate>Sun, 30 Oct 2016 00:00:00 +0000</pubDate><guid>/posts/linux/2016-10-30-bash-setting-variables-from-a-file/</guid><description>Shell scripts sometimes get overly complicated and we need lot of configurations stored in file instead of setting them in ten different files which not to mention is error prone. A simple technique would be to write all the configurations in a properties file and read it in all the scripts.
Create the variables file For example we have all these configurations we need to set
server.build.ip=10.20.0.17 server.stage.ip=10.20.0.77 server.stage.user=stageuser server.stage.user.sudo=stageadmin server.</description></item><item><title>Weekly Unix #7 - wc</title><link>/posts/linux/2016-07-24-weekly-unix-7-wc/</link><pubDate>Sun, 24 Jul 2016 00:00:00 +0000</pubDate><guid>/posts/linux/2016-07-24-weekly-unix-7-wc/</guid><description>wc counts. It can count newlines, bytes, characters and words.
Syntax wc [option] [input-file] Option is what do you want to count.
-c for bytes -m for chars -w for words -l for new lines (lines) Let’s first create a test file that we will work on, and then we will start counting.
echo &amp;#34;this is a dummy file.nI am going to see how wc works&amp;#34; &amp;gt; test $wc -c test 54 test # 54 bytes $wc -m test 54 test # on my machine locale is UTF-8; so again 54 $wc -w test 12 test # 12 words $wc -l test 1 test # only one line in the file We can also have all of them together.</description></item><item><title>Weekly Unix #6 - job control (2)</title><link>/posts/linux/2016-07-19-weekly-unix-6-job-control-2/</link><pubDate>Tue, 19 Jul 2016 00:00:00 +0000</pubDate><guid>/posts/linux/2016-07-19-weekly-unix-6-job-control-2/</guid><description>Finer Job Selection In the previous article we saw basics of job control but we skipped alternatives to select jobs. Consider the following job listing throughout this article.
$jobs [1] Running find . -name *.xml &amp;gt; /dev/null &amp;amp; [2]- Stopped cat /dev/zero &amp;gt; /dev/null [3]+ Stopped find . -name *.cc &amp;gt; /dev/null 1. Using job number You can use the job number (the number in square bracket) to work on it.</description></item><item><title>Weekly Unix #6 - job control</title><link>/posts/linux/2016-07-18-weekly-unix-6-job-control/</link><pubDate>Mon, 18 Jul 2016 00:00:00 +0000</pubDate><guid>/posts/linux/2016-07-18-weekly-unix-6-job-control/</guid><description>Some commands take long time to finish execution. For example if you are searching for a file in a directory or extracting/compressing a directory or maybe building a project which take quite some time to complete. The command when executed takes a while to complete and thereby occupy the terminal preventing you from doing other stuff.
Linux (since a multitasking operating system) offers neat job control tools to deal with this.</description></item><item><title>Weekly Unix #5 - cd</title><link>/posts/linux/2016-07-17-cd/</link><pubDate>Sun, 17 Jul 2016 00:00:00 +0000</pubDate><guid>/posts/linux/2016-07-17-cd/</guid><description>man cd No manual entry for cd That’s because there isn’t any! cd is an internal shell command.
So where do I find help? Well there isn’t much in cd that you can do except change the directory. But since this operation is done hundreds of times a day, we need to do it efficiently.
cd - cd with a hyphen goes to previous directory and executing that again comes back to current directory.</description></item><item><title>Weekly Unix #4 - ls</title><link>/posts/linux/2016-07-15-ls-list-directory-contents/</link><pubDate>Fri, 15 Jul 2016 00:00:00 +0000</pubDate><guid>/posts/linux/2016-07-15-ls-list-directory-contents/</guid><description>This command is one of the most widely used (no references, just guessing) command. It simple lists the directory contents. It lists files, directories and links in current directory (default behavior). The command and it’s variants are so widely used, that some of the distributions contains some aliases for this command in the .bashrc file. For example I am using Mint and it already contains these ls aliases in my .</description></item><item><title>CDPATH: The lesser known path variable</title><link>/posts/linux/2016-07-13-cdpath/</link><pubDate>Wed, 13 Jul 2016 00:00:00 +0000</pubDate><guid>/posts/linux/2016-07-13-cdpath/</guid><description>CDPATH is an environment variable under UNIX, which is referred every time cd command is invoked.
The working of cd Let’s say you invoke the following command:
cd blog The directory blog is looked in current working directory. If found, the current working directory is changed to that. If it is not found there, it is looked in every path in the CDPATH variable. Again if found, it is changed. If not then a directory not found message is displayed and cd returns 1 (Error code).</description></item><item><title>Weekly Unix #3 - tee</title><link>/posts/linux/2016-07-03-unix-command-tee/</link><pubDate>Sun, 03 Jul 2016 00:00:00 +0000</pubDate><guid>/posts/linux/2016-07-03-unix-command-tee/</guid><description>tee command as the man page puts it, reads from standard input and writes to standard output and files. Okay good enough but what does that mean? Well that mean, while using a command, the output is sent to the console. You can redirect it to file by using &amp;gt; and &amp;gt;&amp;gt; to a file. That symbol is of output redirection (a summary of that in the end of this post and all the output redirection is covered in separate post).</description></item><item><title>Weekly Unix #2 - du</title><link>/posts/linux/2016-06-26-weekly-unix-2-du/</link><pubDate>Sun, 26 Jun 2016 00:00:00 +0000</pubDate><guid>/posts/linux/2016-06-26-weekly-unix-2-du/</guid><description>du = Disk Usage du summarizes the disk usage for files and folders.
How to use du This will list size of all the files as well as folders in the current directory. The folders will be explored recursively. That means all the files in the folders will be listed as well.
The above gets bit out of hand when you have lot of files. You won&amp;rsquo;t be able to figure out what is happening as lot of entries will go from your eyes.</description></item><item><title>Practical Emacs Tip #1: Meet the C-x z command</title><link>/posts/linux/2016-06-10-practical-emacs-tip-1-meet-the-c-x-z-command/</link><pubDate>Fri, 10 Jun 2016 00:00:00 +0000</pubDate><guid>/posts/linux/2016-06-10-practical-emacs-tip-1-meet-the-c-x-z-command/</guid><description>The Emacs manual simply states that &amp;ldquo;Repear the most recently executed command&amp;rdquo;.
This command just repeats the last command with the last given set of arguments to that command (if any). No rocket science. Just simple Emacs!
By the way, before we start there is one more thing - Once you press C-x z, you can repeatedly press only z for the command to repeat itself! No need to press C-x again and again.</description></item><item><title>Weekly Unix</title><link>/posts/linux/2016-06-08-weekly-unix-tr/</link><pubDate>Wed, 08 Jun 2016 00:00:00 +0000</pubDate><guid>/posts/linux/2016-06-08-weekly-unix-tr/</guid><description>tr - translate TR basically stands for translate. The man page says - translate or delete character. So tr is used to manipulate the byte stream provided to it. This command again is very powerful when combined with other commands. For example you want to rename files to lower case (thought there are other methods for this), or you want to change a (or a set of) character in a file or from a live stream, this is the utility you will need.</description></item></channel></rss>