<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Essay on</title><link>https://www.s9a.me/category/essay/</link><description>Recent content in Essay on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 30 Nov 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://www.s9a.me/category/essay/index.xml" rel="self" type="application/rss+xml"/><item><title>Design Patterns for Container Based Distributed Systems</title><link>https://www.s9a.me/posts/2021-11-30-design-patterns-for-container-application/</link><pubDate>Tue, 30 Nov 2021 00:00:00 +0000</pubDate><guid>https://www.s9a.me/posts/2021-11-30-design-patterns-for-container-application/</guid><description>This article is inspired from paper titled with the same name published by Brendan Burns and David Oppenheimer
Containers now a days are becoming more and more analogous to objects in object-oriented programming. Like objects, containers should be small and should do one and only one thing. That’s just another way of saying Single Responsibility Principle. We are seeing a similar trend from the late 1980s and early 1990s when object-oriented programming revolutionized software development.</description></item><item><title>Why you should not use null as a method parameter</title><link>https://www.s9a.me/posts/2020-01-06-design-oop-avoid-using-nulls-method-argument/</link><pubDate>Mon, 06 Jan 2020 00:00:00 +0000</pubDate><guid>https://www.s9a.me/posts/2020-01-06-design-oop-avoid-using-nulls-method-argument/</guid><description>Object Oriented concept was first introduced with Lisp in the late 1950s. Lisp has atoms and attributes, where the atoms represented an real world object. OOP has evolved quite a bit after that. SOLID design principle were introduced that helped us craft a better software. I will not go in details of how these principles help us, there is already lot of material out there. Instead I&amp;rsquo;ll focus on some mistakes we do while implementing these patterns.</description></item><item><title>On The Turing Test</title><link>https://www.s9a.me/posts/2018-08-04-the-turing-test/</link><pubDate>Sat, 04 Aug 2018 04:47:00 +0000</pubDate><guid>https://www.s9a.me/posts/2018-08-04-the-turing-test/</guid><description>The Imitation Game or Turing Test has become the hallmark of the question - ‘Can machines think?’. Turing predicts that by the end of 20th century, machine would be able to think. Humans have been on moon after that and machines are still at the dawn of thinking. Thinking. The paper is philosophical one and ‘think’ is a vague term which cannot be determined in simple yes or no. Turing has therefore, given a method, a test through which we can assess if machines can think.</description></item><item><title>Vagrant - Setting up and tearing down development environments on the fly</title><link>https://www.s9a.me/posts/2017-07-02-vagrant-setting-up-and-tearing-down-development-environments-on-the-fly/</link><pubDate>Sun, 02 Jul 2017 00:00:00 +0000</pubDate><guid>https://www.s9a.me/posts/2017-07-02-vagrant-setting-up-and-tearing-down-development-environments-on-the-fly/</guid><description>I try a lot of new things and this trying new things forces me to install something new. I hate installing new packages/frameworks just because I want to try it. Nothing is removed cleanly later and your OS is left with configuration files, user files, hidden directories and lot more trash created by this new package. I hate that!
Up till now, I had no option. I used to install, then remove and after a while lot of unwanted files would be lying here and there.</description></item><item><title>Memento</title><link>https://www.s9a.me/posts/2016-08-11-memento/</link><pubDate>Thu, 11 Aug 2016 00:00:00 +0000</pubDate><guid>https://www.s9a.me/posts/2016-08-11-memento/</guid><description>Ever used an image editing software? We opened an image but it’s too sharp and the light is not good. We make some changes and still not satisfied, we make few more changes only to realize that the previous changes were better than these new! We want to restore to previous changes. If we were using a drawing sheet and paint brush, this task would be very difficult; perhaps impossible. But with softwares, that’s not a problem.</description></item></channel></rss>